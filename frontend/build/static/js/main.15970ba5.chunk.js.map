{"version":3,"sources":["Context/ChatProvider.js","components/ChatLoading.js","components/miscellaneous/ProfileModal.js","config/ChatLogics.js","components/userAvatar/UserListItem.js","components/miscellaneous/SideDrawer.js","components/userAvatar/UserBadgeItem.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/ScrollableChat.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","Pages/Homepage.js","Pages/Chatpage.js","App.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","ChatLoading","_jsxs","Stack","Skeleton","height","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","onClick","IconButton","d","base","icon","ViewIcon","Modal","size","isCentered","ModalOverlay","ModalContent","h","ModalHeader","fontSize","fontFamily","justifyContent","name","ModalCloseButton","ModalBody","flexDir","alignItems","Image","borderRadius","boxSize","src","pic","alt","Text","md","email","ModalFooter","Button","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","UserListItem","handleFunction","Box","cursor","bg","_hover","background","color","w","px","py","mb","Avatar","mr","SideDrawer","search","setSearch","searchResult","setSearchResult","loading","setLoading","loadingChat","setLoadingChat","toast","useToast","accessChat","async","console","log","config","headers","Authorization","token","data","axios","post","find","c","error","title","description","message","status","duration","isClosable","position","p","borderWidth","Tooltip","label","hasArrow","placement","variant","className","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","pl","map","notif","MenuItem","chat","filter","n","isGroupChat","chatName","as","rightIcon","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","pb","Input","placeholder","onChange","e","target","get","Spinner","ml","UserBadgeItem","admin","Badge","colorScheme","CloseIcon","GroupChatModal","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","FormControl","query","handleSearch","flexWrap","u","handleDelete","delUser","sel","slice","handleGroup","userToAdd","includes","stringify","response","MyChats","fetchAgain","setLoggedUser","fetchChats","lg","AddIcon","overflowY","latestMessage","content","substring","ScrollableChat","ScrollableFeed","style","display","mt","backgroundColor","marginLeft","marginTop","padding","maxWidth","UpdateGroupChatModal","fetchMessages","setFetchAgain","renameloading","setRenameLoading","handleAddUser","user1","groupAdmin","put","chatId","handleRemove","isLoading","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","ArrowBackIcon","toUpperCase","alignSelf","margin","onKeyDown","event","key","id","isRequired","Lottie","options","width","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","Homepage","Chatpage","App","ChakraProvider","Router","Switch","Route","path","component","exact","ReactDOM","render","React","StrictMode","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.15970ba5.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Talk-A-Tive\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Homepage = () => {\r\n  const { user } = ChatState();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    if (!userInfo) history.push(\"/\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        w=\"100%\"\r\n        h=\"91.5vh\"\r\n        p=\"10px\"\r\n      >\r\n        {user && <MyChats />}\r\n        {user && <Chatbox />}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ChakraProvider>\r\n      <Router>\r\n        <ChatProvider>\r\n          <Switch>\r\n            <Route path=\"/\" component={Homepage} exact />\r\n            <Route path=\"/chats\" component={Chatpage} />\r\n          </Switch>\r\n        </ChatProvider>\r\n      </Router>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { ChakraProvider } from '@chakra-ui/react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport ChatProvider from './Context/ChatProvider';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider>\r\n      <BrowserRouter>\r\n        <ChatProvider>\r\n          <App />\r\n        </ChatProvider>\r\n      </BrowserRouter>\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}